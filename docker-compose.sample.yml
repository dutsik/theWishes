version: "3.2"

services:
#  nginx:
#      image: nginx:1.11-alpine
#      restart: always
#      volumes:
#        - ./website:/code
#        - ./docker/nginx:/conf
#        - ./public:/app/public
#        - ./log:/log
##        - /etc/letsencrypt:/letsencrypt
#      ports:
#        - 80:80
#        - 443:443
#      command: sh -c 'ln -sfn /conf/production.nginx.conf /etc/nginx/conf.d/app.conf && sed -i -- "s/worker_processes 1;/worker_processes auto;/g" /etc/nginx/nginx.conf && exec nginx -g "daemon off;"'
#      depends_on:
#        - app
#        - php
#      networks:
#        - net


  postgresql:
    image: postgres:9.6-alpine
    networks:
      - net
    volumes:
      - ./docker/db:/docker-entrypoint-initdb.d
      - pd-data:/var/lib/postgresql/data
      # docker volume create --name postgres-data -d local
    ports:
      - "55432:5432"

  app:
    build:
      context: .
      dockerfile: dev.Dockerfile
#    image: dutsik/rails-ember:development
    volumes:
      - .:/usr/src/app
 # Mount the 'gems' volume on the folder that stores bundled gems:
      - app-gems:/usr/local/bundle
    command: sh -c "bundle install && bundle exec puma --config config/puma.rb"
    ports:
      - "3000:3000"
    depends_on:
      - postgresql
    networks:
      - net

    environment: &backend_env
      RAILS_ENV: development
      RAILS_MAX_THREADS: 5


      PG_TIMEOUT: 5000
      PG_POOL: 5

      # Notice that this is the DB we'll use:
      DATABASE_URL: postgres://postgres:123123@postgresql:5432/
      # We'll use this env variable to make the log output gets directed
      # to Docker:
      RAILS_LOG_TO_STDOUT: "true"


      ADMIN_NAME: 'Бендер Родригес'
      ADMIN_EMAIL: <EMAIL GOES HERE>@gmail.com
      ADMIN_PASSWORD: <PASSWORD GOES HERE>
      DOMAIN_NAME: <DOMAIN GOES HERE>


      SECRET_KEY_BASE: heugbweruhbgwuer

      DEVISE_JWT_SECRET_KEY: 3736b3824cf0cb81900b5186896008d61fb295d549d7df4e7b74a04ea7601395fceb4e7318ae89e7ff36cf1be230ec4b9f144405e20934bfcf8a18ca2669ab4a
    # Keep the stdin open, so we can attach to our app container's process and do things such as
    # byebug, etc:
    stdin_open: true

    # Enable sending signals (CTRL+C, CTRL+P + CTRL+Q) into the container:
    tty: true

  front:
    build:
        context: docker/frontend
        dockerfile: Dockerfile
    command: sh /init.sh
    environment:
      HOST: 0.0.0.0
      PORT: 8080
    volumes:
      - ./front:/app:cached
    ports:
      - "8080:8080"
    stdin_open: true
    tty: true
    networks:
          - net


networks:
  net:
    ipam:
      driver: default

volumes:
  # We'll define a volume that will store the data from the postgres databases:
  pd-data:
    driver: local
  # The rabbitmq data store volumeas
  redis-data:
    driver: local
  # We'll also define a volume that will store gems installed manually after the initial app
  # development image build process:
  app-gems:
    driver: local